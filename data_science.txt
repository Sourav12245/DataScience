train_df = pd.read_csv("train.csv")
test_df = pd.read_csv("test.csv")
combine = [train_df,test_df]
#-------------------------------------------------------------
for dataset in combine:
    dataset['Title'] = dataset['Name'].str.extract('([A-Za-z]+)\.', expand=False)
#-------------------------------------------------------------
test_df['Fare'].iloc[152] = 8.6589
#--------------------------------------------------------------------------------------------
for dataset in combine:
    dataset['Surname'] = dataset['Name'].str.extract('([A-Za-z]+)\,', expand=False)
    dataset['Fare'] = dataset['Fare'].astype(int)
#---------------------------------------------------------------
train_df['Title'].iloc[796] = 'Mrs'
#---------------------------------------------------------------------------
for dataset in combine:
    dataset['Title'] = dataset['Title'].replace(['Don', 'Rev', 'Dr','Major','Sir','Col', 'Capt','Jonkheer'],'Mr')
    dataset['Title'] = dataset['Title'].replace(['Lady','Ms','Countess'],'Mrs')
    dataset['Title'] = dataset['Title'].replace(['Mlle','Mme','Dona',],'Miss')
#-----------------------------------------------------------------------------------------
train_df['Embarked'] = train_df['Embarked'].fillna('C')
#train_df['Embarked'] = train_df['Embarked'].replace('NaN',-99999)
#-----------------------------------------------------------------------------------------

for dataset in combine:
    dataset['Age'] = dataset.groupby(['Pclass','Embarked','Sex'])['Age'].transform(lambda x: x.fillna(x.mean()))
#train_df['Age'] = train_df['Age'].replace('NaN',-99999)
#test_df['Age'] = test_df['Age'].replace('NaN',-99999)
combine = [train_df,test_df]
#--------------------------------------------------------------------------------------------------
train_df['Age'] = train_df['Age'].astype(int)
test_df['Age'] = test_df['Age'].astype(int)
combine = [train_df,test_df]

#--------------------------------------------------------------------------------------------------------------
for dataset in combine:
    dataset['Title'] = dataset['Title'].map({'Mr': 3,'Master': 1,'Miss': 2,'Mrs': 4})
    dataset['Sex'] = dataset['Sex'].map({'male': 1,'female': 0})
    dataset['Embarked'] = dataset['Embarked'].map({'S': 1,'C': 2,'Q': 3})
#-------------------------------------------------------------------------------------------------
for dataset in combine:
    dataset['Family'] = dataset['SibSp'] + dataset['Parch']
#-----------------------------------------------------------------------------------------------------------
b = pd.get_dummies(train_df['Family'], 'Family')
train_df['Alone'] = b.Family_0
k = pd.get_dummies(test_df['Family'], 'Family')
test_df['Alone'] = k.Family_0
#-------------------------------------------------------------------------------------------------------------------
for dataset in combine:    
    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0
    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1
    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2
    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3
    dataset.loc[ dataset['Age'] > 64, 'Age'] = 4
#-------------------------------------------------------------------------------------------------------------
#changing Mr. to Master for boys less than 14 years of age in train data
train_df['Title'].iloc[731] = 1
train_df['Title'].iloc[683] = 1
train_df['Title'].iloc[686] = 1
#changing Mr. to Master for boys less than 14 years of age in test data
test_df['Title'].iloc[5] = 1
test_df['Title'].iloc[230] = 1
#changing Master. to Mr. for men more than or equal to 15 years of age in train data
train_df['Title'].iloc[65] = 3
train_df['Title'].iloc[159] = 3
train_df['Title'].iloc[176] = 3
train_df['Title'].iloc[709] = 3
#changing Master. to Mr. for men more than or equal to 15 years of age in test data
test_df['Title'].iloc[244] = 3
test_df['Title'].iloc[339] = 3
test_df['Title'].iloc[334] = 3
test_df['Title'].iloc[417] = 3
#change Mrs. into Miss. for girls less than 15 years in train
train_df['Title'].iloc[9] = 2
train_df['Title'].iloc[19] = 2
train_df['Title'].iloc[140] = 2
train_df['Title'].iloc[367] = 2
train_df['Title'].iloc[533] = 2
train_df['Title'].iloc[578] = 2
train_df['Title'].iloc[830] = 2
# no value in Test
#------------------------------------------------------------------------------------------------
#for dataset in combine:    
#    dataset.loc[dataset['Fare'] <= 8, 'Fare'] = 0
#    dataset.loc[(dataset['Fare'] > 8) & (dataset['Fare'] <= 15) , 'Fare'] = 1
#    dataset.loc[(dataset['Fare'] > 15) & (dataset['Fare'] <= 37) , 'Fare'] = 2
#    dataset.loc[(dataset['Fare'] > 37),'Fare'] = 4
#-------------------------------------------------------------------------------------------------
train_df = train_df.drop(['PassengerId','Name','Ticket','Cabin','Surname','Fare','Family','Embarked','Parch','SibSp','Title','Alone'],axis = 1)
test_df = test_df.drop(['PassengerId','Name','Ticket','Cabin','Surname','Fare','Family','Embarked','Parch','SibSp','Title','Alone'],axis = 1)
combine = [train_df, test_df]






def neibho():
    surv_table = pd.read_csv('surv.csv')
    surv_table = surv_table.drop(['PassengerId'], axis = 1)
    new_train = train_df
    new_test = test_df
    from sklearn import cross_validation,neighbors
    x = np.array(new_train.drop(['Survived'],axis = 1))
    y = np.array(new_train['Survived'])
    #x_train, x_test, y_train, y_test = cross_validation.train_test_split(x, y, test_size = 0.2, random_state = 1)
    clf = neighbors.KNeighborsClassifier()
    clf.fit(x,y)
    acc = clf.score(new_test,surv_table) 
    print ('Accuracy of the model is:',acc*100, 'Percent')

